//public static Dictionary<RGBPixel, Boolean> getDistincitColors(RGBPixel[,] ImageMatrix)
//{
//    Dictionary<RGBPixel, Boolean> distinct_colors = new Dictionary<RGBPixel, Boolean>();//O(1)
//    int Height = ImageMatrix.GetLength(0);              //O(1)
//    int Width = ImageMatrix.GetLength(1);               //O(1)
//    for(int i = 0; i < Height; i++)                     //O(N)
//    {
//        for(int j = 0; j<Width; j++)                    //O(N)
//        {
//            if (distinct_colors.Count == 0 || !distinct_colors.ContainsKey(ImageMatrix[i, j]))//O(1) 
//            {
//                distinct_colors.Add(ImageMatrix[i, j],true);//O(1)
//            }
//        }
//    }
//    return distinct_colors;   //Total Function's Complexity = E(N^2)
//}

//public static HashSet<RGBPixel> getDistincitColors2(RGBPixel[,] ImageMatrix) 
//{
//    int Height = ImageMatrix.GetLength(0);              //O(1)
//    int Width = ImageMatrix.GetLength(1);               //O(1)
//    HashSet<RGBPixel> distict_colors = new HashSet<RGBPixel>(); //O(1)
//    for (int i = 0; i < Height; i++)                    //O(N) 
//    {
//        for (int j = 0; j < Width; j++)                 //O(N) 
//        {
//            distict_colors.Add(ImageMatrix[i, j]);      //O(N)
//        }
//    }
//    return distict_colors;                            //Total Function's Complexity = E(N^3)
//}


struct edge 
{
    public RGBPixel From, To;
}


/*public static Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> getKruksalMinimumSpanningTree(Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> FullyConnectedGraph)
{
    Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> MST =  new Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>>();
    Dictionary<RGBPixel, int> IndexSet = new Dictionary<RGBPixel, int>();
    int position = 0;
    // Complexity : O(V)
    foreach (var Vertex in FullyConnectedGraph.Keys)
    {
        IndexSet.Add(Vertex, position);
        position++;
    }  
    Dictionary<double,List<edge>> distances = new Dictionary<double, List<edge>>();

    // Complexity : O(V+E)
    foreach (var Node in FullyConnectedGraph)
    {
        foreach (var Neighbor in Node.Value)
        {
            // Neighbour key is the RGBPixel
            // Neighbour value is the distance
            if (!distances.ContainsKey(Neighbor.Value))
            {
                distances.Add(Neighbor.Value, new List<edge>());
            }
            edge e = new edge();
            e.From = Node.Key;
            e.To = Neighbor.Key;
            distances[Neighbor.Value].Add(e);
        }
    }
    // Sorting by key which is the distance
    //Complexity : O(E)
    var SortedDistances = distances.OrderBy(Dist => Dist.Key);
    int vertices = FullyConnectedGraph.Keys.Count, MSTEdges = 0;
    bool MSTIsComplete = false;
    // MinimumDistance key is distance 
    // MinimumDistance value is list of structs (edges)
    foreach (var MinimumDistance in SortedDistances)
    {
        //Looping over every struct
        foreach (var Neighbour in MinimumDistance.Value)
        {
            if (MSTEdges == vertices - 1)
            {
                MSTIsComplete = true;
                break;
            }
                    
            if (IndexSet[Neighbour.From] == IndexSet[Neighbour.To])
            {
                continue;
            }
            else
            {
                if (!MST.ContainsKey(Neighbour.From))
                {
                    MST.Add(Neighbour.From, new List<KeyValuePair<RGBPixel, double>>());
                }
                AddToMST(MST, Neighbour.From, Neighbour.To, MinimumDistance.Key, ref MSTEdges);
                Union( IndexSet, IndexSet[Neighbour.From], IndexSet[Neighbour.To]);
            }
        }
        if (MSTIsComplete)
        {
            break;
        }
    }
    return MST;
           
}*/


//Complexity : O(V)
/* public static void Union ( Dictionary<RGBPixel, int> IndexSet, int ReplaceBy, int Replaced)
{
    for(int i=0;i<IndexSet.Count;i++)
    {
        if(IndexSet.ElementAt(i).Value == Replaced)
        {
            IndexSet[IndexSet.ElementAt(i).Key] = ReplaceBy;
        }
    }
}*/


//Complexity : O(1)
/*public static void AddToMST(Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> MST, RGBPixel From, RGBPixel To, double distance, ref int MSTEdges)
{
    MSTSum += distance;
    KeyValuePair<RGBPixel, double> KVP = new KeyValuePair<RGBPixel, double>(To, distance);
    MST[From].Add(KVP);
    MSTEdges++;
}*/


public static double MSTSum;
// this is my fully connected graph 
public static Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> AdjList;
public static int vertices;
public static bool[,,] IsVisited;
// IndexedPriorityQueue : destination node -> (source node, edge weight)
public static Dictionary<RGBPixel, KeyValuePair<RGBPixel,double>>IndexedPriorityQueue; 
public static void updateIndexedPriorityQueue(RGBPixel SourceNode)
{
    //byte []Node = new byte[](vertex.red, vertex.green, vertex.blue);
    IsVisited[SourceNode.red, SourceNode.green, SourceNode.blue] = true;
    // DestinationNode is a keyValuePair<RGBPixel, double>
    // RGBPixel representing the node the edge is pointing at 
    foreach (var DestinationNode in AdjList[SourceNode])
    {
        if (IsVisited[DestinationNode.Key.red, DestinationNode.Key.green, DestinationNode.Key.blue] == true)
        {
            continue;
        }
        // if i am visiting a new vertex for the first time
        if (!IndexedPriorityQueue.ContainsKey(DestinationNode.Key))
        {
            IndexedPriorityQueue.Add(DestinationNode.Key, new KeyValuePair<RGBPixel, double>(SourceNode, DestinationNode.Value));
        }
        else
        {
            if (IndexedPriorityQueue[DestinationNode.Key].Value > DestinationNode.Value)
            {
                KeyValuePair<RGBPixel, double> UpdatedRoute = new KeyValuePair<RGBPixel, double>(SourceNode, DestinationNode.Value);
                IndexedPriorityQueue[DestinationNode.Key] = UpdatedRoute;
            }
        }
                
    }
}

public static Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> getEagerPrimMinimumSpanningTree(Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> FullyConnectedGraph)
{
    AdjList = FullyConnectedGraph;
    IndexedPriorityQueue = new Dictionary<RGBPixel, KeyValuePair<RGBPixel, double>>();
    vertices = AdjList.Keys.Count;
    Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>> MST = new Dictionary<RGBPixel, List<KeyValuePair<RGBPixel, double>>>();
    IsVisited = new bool[vertices, vertices, vertices];
    MSTSum = 0;
    //bool MSTIsComplete = false;
    int MSTEdges = 0;
    RGBPixel[] Keys = FullyConnectedGraph.Keys.ToArray();
    updateIndexedPriorityQueue(Keys[0]);
    while (IndexedPriorityQueue.Count > 0)
    {
        if (MSTEdges == vertices - 1)
        {
            break;
        }
        var SortedIndexedPriorityQueue = IndexedPriorityQueue.OrderBy(EdgeWeight=>EdgeWeight.Value.Value);
        var FirstElement = SortedIndexedPriorityQueue.First();
        IndexedPriorityQueue.Remove(FirstElement.Value.Key);
        if (!MST.ContainsKey(FirstElement.Value.Key))
        {
            MST.Add(FirstElement.Value.Key, new List<KeyValuePair<RGBPixel, double>>());
        }
        MST[FirstElement.Value.Key].Add(new KeyValuePair<RGBPixel, double>(FirstElement.Key, FirstElement.Value.Value));
        MSTEdges++;
        MSTSum += FirstElement.Value.Value;
        updateIndexedPriorityQueue(FirstElement.Key);

    }
    return MST;
}


        //------------------------------------------------------------------------------------------------------------------------------------------//
        //public static double[,] getDistanceBetweenColors(List<RGBPixel> DistinctColor)
        //{

        //    double[,] FullyconnectedGraph = new double[DistinctColor.Count, DistinctColor.Count];
        //    double[] MinimumWeight = new double[DistinctColor.Count];
        //    source[i] = source
        //        min[i] = 40
        //        dest[i] = dest
        //        parent[i] = 0



        //        for (int i = 0; i < DistinctColor.Count; i++)
        //    {



        //    }
        //    for (int i = 0; i < DistinctColor.Count; i++)
        //    {
        //        RGBPixel Current = DistinctColor[i];
        //        double R = Current.red;
        //        double G = Current.green;
        //        double B = Current.blue;


        //        for (int j = 0; j < DistinctColor.Count; j++)
        //        {

        //            RGBPixel next = DistinctColor[j];
        //            double r = next.red;
        //            double g = next.green;
        //            double b = next.blue;
        //            double sum = (((R - r) * (R - r)) + ((G - g) * (G - g)) + ((B - b) * (B - b)));
        //            double result = Math.Sqrt(sum);
        //            double result = Math.Sqrt(fastpower((R - r), 2) + (fastpower((G - g), 2)) + (fastpower((B - b), 2)));
        //            FullyconnectedGraph[i, j] = result;
        //        }

        //    }
        //    return FullyconnectedGraph;


        //}

        //------------------------------------------------------------------------------------------------------------------------------------------//
        //public static double getDistance( int i,  int j,List<RGBPixel>distinctcolors)
        //{
        //    double dif;
        //    RGBPixel new_one1 = distinctcolors[i], new_one2 = distinctcolors[j];
        //    dif =(double)Math.Sqrt((new_one1.red - new_one2.red) * (new_one1.red - new_one2.red) + (new_one1.blue - new_one2.blue) * (new_one1.blue - new_one2.blue) + (new_one1.green - new_one2.green) * (new_one1.green - new_one2.green));
        //    return dif;
        //}

        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //public static Vertex[] MST(List<RGBPixel> DistinctColors)
        //{
        //    int[] Min = new int[DistinctColors.Count];
        //    double[,] FullyconnectedGraph = new double[DistinctColors.Count, DistinctColors.Count];
        //    PriorityQueue<Vertex> queue = new PriorityQueue<Vertex>(DistinctColors);
        //    int vertexCount = DistinctColors.Count;
        //    Vertex[] vertices = new Vertex[vertexCount];

        //    for (int i = 0; i < vertexCount; i++)
        //    {
        //        vertices[i]=new Vertex() { Key = double.MaxValue, Parent = -1, V = i};
        //        if (i == 0)
        //        {
        //            vertices[i].Key = 0;
        //        }
        //        queue.Enqueue(vertices[i].Key, vertices[i]);
        //    }
        //    for(int i=0;i<vertexCount-1;i++)
        //    {
        //        Vertex minVertex = queue.Dequeue();
        //        int u = minVertex.V;
        //        vertices[u].IsProcessed = true;
        //        for (int e=0; e<vertexCount;e++)
        //        {
        //            double distance;
        //            RGBPixel new_one1 = DistinctColors[u], new_one2 = DistinctColors[e];
        //            distance = (double)Math.Sqrt((new_one1.red - new_one2.red) * (new_one1.red - new_one2.red) + (new_one1.blue - new_one2.blue) * (new_one1.blue - new_one2.blue) + (new_one1.green - new_one2.green) * (new_one1.green - new_one2.green));

        //            if (distance > 0 && !vertices[e].IsProcessed && distance < vertices[e].Key)
        //            {
        //                vertices[e].Parent = u;
        //                vertices[e].Key = distance;
        //                queue.UpdatePriority(vertices[e], vertices[e].Key);
        //            }
        //        }
        //    }

        //    return vertices;
        //}